# Input Method configuration, im-config.common
# (C) Osamu Aoki <osamu@debian.org>, GPL-2+
# vim: set sts=4 expandtab:
#
#############################################################
# IM Configuration functions used by im-config
#############################################################

# active_im
#   echo active IM configuration name set in the system/user configuration
active_im () {
    if [ ! -r $IM_CONFIG_XINPUTRC ]; then
        echo -n "unreadable"
    elif check_md5sum $IM_CONFIG_XINPUTRC ; then
        # when configuration is autogenerated by im-config
        IM_CONFIG_ACTIVE_IM=$(sed -n -e 's/^run_im \([^ ]*\) *$/\1/p' < $IM_CONFIG_XINPUTRC)
        if [ -z "$IM_CONFIG_ACTIVE_IM" ]; then
            echo -n "bogus"
        elif [ -r $IM_CONFIG_DATA/[012345678]?_$IM_CONFIG_ACTIVE_IM.conf ]; then
            echo $IM_CONFIG_ACTIVE_IM
        else
            echo -n "bogus"
        fi
    else
        # when configuration is chenged manually by the user
        echo -n "custom"
    fi
}

# dsc_short <config>
#   echo IM configuration short description for IM configuration name
dsc_short () {
    if [ -r $IM_CONFIG_DATA/??_$1.conf ] ; then
        # use subshell here
        {
            # subshell
            . $IM_CONFIG_DATA/??_$1.conf
            if [ "x$IM_CONFIG_AUTOMATIC" = "x$1" ]; then
                echo -n "$IM_CONFIG_SHORT @"
            else
                echo -n "$IM_CONFIG_SHORT"
            fi
        }
    else
        echo "ERROR: short description for $1 not found." >&2
    fi
}

# dsc_long <config>
#   echo IM configuration long description for IM configuration name
dsc_long () {
    if [ -r $IM_CONFIG_DATA/??_$1.conf ] ; then
        # use subshell here
        {
            # subshell
            . $IM_CONFIG_DATA/??_$1.conf
            echo -n "$IM_CONFIG_LONG"
        }
    else
        echo "ERROR: long description for $1 not found." >&2
    fi
}

#############################################################
# Package status function used by menu
#############################################################
# avail_menu <config>
#   configuration availability for menu listing
#   define package_menu for 00-89
avail_menu () {
    if [ -r $IM_CONFIG_DATA/??_$1.conf ]; then
        . $IM_CONFIG_DATA/??_$1.conf
        package_menu
    else
        echo "E: wrong config name: $1" >&2
        # return FALSE
        return 1
    fi
}

#############################################################
# User modification verification functions used by im-config
#############################################################
# check_md5sum <filename>
check_md5sum () {
    if [ -r "$1" ] && \
       [ "# im-config signiture: $(head -n -1 $1 | md5sum)" = "$(tail -n 1 $1)" ]; then
        true
    else
        false
    fi
}
# write_config <config name> <file name>
write_config () {
    echo -n "# im-config(8) generated on $(date -R)" > $2
    echo  >> $2
    echo -n "run_im $1" >> $2
    echo  >> $2
    echo -n "# im-config signiture: $(md5sum < $2)" >> $2
    echo  >> $2
}

#############################################################
# GUI/console UI functions used by im-config
#############################################################

# infobox (size fixed)
infobox () {
    if [ "x$DISPLAY" = "x" ]; then
        # console
        dialog --infobox "$1" 15 76
    else
        # GTK GUI
        zenity --info --text "$1"
    fi
}

# menulist_init (size fixed)
# $1 title (line1)
# $2 text  (line3)
# $3 colum1(GUI)
# $4 colum2(GUI)
# $5 colum3(GUI)
menulist_init () {
    if [ "x$DISPLAY" = "x" ]; then
        # console
        printf "%s\n\n%s" "dialog --radiolist \"$1" "$2\" 23 76 18"
    else
        # GTK GUI
        printf "%s" "zenity --title=\"$1\" --width=600 --height=400 --text=\"$2\" --list --radiolist --column \"$3\" --column \"$4\" --column \"$5\""
    fi
}

# menulist_add (size fixed)
# $1 $y
# $2 \"$(dsc_short $y)\"
# $3 on
menulist_add () {
    if [ "x$DISPLAY" = "x" ]; then
        # console
        printf "%s" "$1 \"$2\" $3"
    else
        # GTK GUI
        if [ "x$3" = "xon" ]; then
            printf "%s" "TRUE $1 \"$2\""
        else
            printf "%s" "FALSE $1 \"$2\""
        fi
    fi
}

# menulist_eval
# $1 command-line 
menulist_eval () {
    if [ "x$DISPLAY" = "x" ]; then
        # console
        eval "$1"
    else
        # GTK GUI
        eval "$1" 1>&2
    fi
}
